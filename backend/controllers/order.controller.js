const Order = require('../models/order.model');
const mongoose = require('mongoose');

// =====================================
// üìå T·∫°o ƒë∆°n h√†ng m·ªõi
// =====================================
const createOrder = async (req, res) => {
    try {
        const { userId, shippingAddress, products } = req.body;

        // Chuy·ªÉn userId th√†nh ObjectId c·ªßa MongoDB
        const convertedUserId = mongoose.Types.ObjectId(userId);

        // Chuy·ªÉn productId trong m·∫£ng s·∫£n ph·∫©m th√†nh ObjectId
        const convertedProducts = products.map((item) => ({
            productId: mongoose.Types.ObjectId(item.productId),
            quantity: item.quantity,
            price: item.price,
        }));

        // T·∫°o ƒë∆°n h√†ng m·ªõi
        const newOrder = new Order({
            userId: convertedUserId,
            shippingAddress,
            products: convertedProducts,
        });

        // L∆∞u ƒë∆°n h√†ng
        const savedOrder = await newOrder.save();
        res.status(201).json(savedOrder);
    } catch (error) {
        console.error("Error while saving order:", error);
        res.status(500).json({ message: "L·ªói khi t·∫°o ƒë∆°n h√†ng", error });
    }
};

// =====================================
// üìå L·∫•y th√¥ng tin ƒë∆°n h√†ng theo ID
// =====================================
const getOrderById = async (req, res) => {
    const orderId = req.params.id;

    try {
        // T√¨m ƒë∆°n h√†ng v√† populate th√¥ng tin s·∫£n ph·∫©m
        const order = await Order.findById(orderId).populate('products.productId');
        if (!order) {
            return res.status(404).json({ message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });
        }

        res.status(200).json(order);
    } catch (err) {
        res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y ƒë∆°n h√†ng', error: err });
    }
};

// =====================================
// üìå L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa 1 ng∆∞·ªùi d√πng
// =====================================
const getOrdersByUser = async (req, res) => {
    const userId = req.params.userId;

    try {
        // T√¨m ƒë∆°n h√†ng theo userId v√† populate s·∫£n ph·∫©m
        const orders = await Order.find({ userId }).populate('products.productId');
        res.status(200).json(orders);
    } catch (err) {
        res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch ƒë∆°n h√†ng', error: err });
    }
};

// =====================================
// üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
// =====================================
const updateOrderStatus = async (req, res) => {
    const orderId = req.params.id;
    const { status } = req.body;

    try {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        const updatedOrder = await Order.findByIdAndUpdate(orderId, { status }, { new: true });

        if (!updatedOrder) {
            return res.status(404).json({ message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });
        }

        res.status(200).json(updatedOrder);
    } catch (err) {
        res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng', error: err });
    }
};

module.exports = {
    createOrder,
    getOrderById,
    getOrdersByUser,
    updateOrderStatus
};
