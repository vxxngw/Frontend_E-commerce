const Order = require('../models/order.model');
const mongoose = require('mongoose');
const Product = require('../models/product.model'); // Import model s·∫£n ph·∫©m
// =====================================
// üìå T·∫°o ƒë∆°n h√†ng m·ªõi
// =====================================
const createOrder = async (req, res) => {
    try {
        const { products, shippingAddress, userId } = req.body;

        // T√≠nh gi√° cho t·ª´ng s·∫£n ph·∫©m v√† t·ªïng gi√° ƒë∆°n h√†ng
        let totalPrice = 0;
        const updatedProducts = await Promise.all(
            products.map(async (product) => {
                const productDetails = await Product.findById(product.productId);
                if (!productDetails) {
                    throw new Error(`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: ${product.productId}`);
                }

                const price = productDetails.new_price * product.quantity; // T√≠nh gi√° d·ª±a tr√™n new_price v√† quantity
                totalPrice += price;

                return {
                    ...product,
                    price, // G√°n gi√° tr·ªã price ƒë√£ t√≠nh v√†o s·∫£n ph·∫©m
                };
            })
        );

        // T·∫°o ƒë∆°n h√†ng m·ªõi
        const newOrder = new Order({
            userId,
            products: updatedProducts,
            shippingAddress,
            totalPrice,
            status: 'pending',
            paymentStatus: 'pending',
        });

        const savedOrder = await newOrder.save();
        console.log("Order saved:", savedOrder);
        res.status(201).json(savedOrder);
    } catch (error) {
        console.error("L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
        res.status(500).json({ message: "L·ªói khi t·∫°o ƒë∆°n h√†ng", error });
    }
};

// =====================================
// üìå L·∫•y th√¥ng tin ƒë∆°n h√†ng theo ID
// =====================================
// =====================================
// üìå L·∫•y th√¥ng tin ƒë∆°n h√†ng theo ID
// =====================================
const getOrderById = async (req, res) => {
    try {
        const { id } = req.params; // L·∫•y orderId t·ª´ URL
        const order = await Order.findById(id).populate({
            path: 'products.productId', // Populate th√¥ng tin s·∫£n ph·∫©m
            select: 'name new_price description image' // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt t·ª´ s·∫£n ph·∫©m
        });

        if (!order) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
        }

        res.status(200).json(order); // Tr·∫£ v·ªÅ th√¥ng tin ƒë∆°n h√†ng
    } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin ƒë∆°n h√†ng:", error);
        res.status(500).json({ message: 'L·ªói server', error });
    }
};

// =====================================
// üìå L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa 1 ng∆∞·ªùi d√πng
// =====================================
// =====================================
// üìå L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa 1 ng∆∞·ªùi d√πng
// =====================================
// =====================================
// üìå L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa 1 ng∆∞·ªùi d√πng
// =====================================
const getOrdersByUser = async (req, res) => {
    const { userId } = req.params; // L·∫•y ID ng∆∞·ªùi d√πng t·ª´ request params
    console.log("Fetching orders for user:", userId); // Log userId

    try {
        // T√¨m ƒë∆°n h√†ng theo userId v√† populate s·∫£n ph·∫©m
        const orders = await Order.find({ userId }).populate({
            path: 'products.productId', // Populate th√¥ng tin s·∫£n ph·∫©m
            select: 'name new_price description image' // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt t·ª´ s·∫£n ph·∫©m
        });
        console.log("Orders found:", orders); // Log n·∫øu t√¨m th·∫•y ƒë∆°n h√†ng

        // Ki·ªÉm tra d·ªØ li·ªáu sau khi populate
        orders.forEach(order => {
            console.log('Products in order:', order.products);
        });

        res.status(200).json(orders); // Tr·∫£ v·ªÅ ƒë∆°n h√†ng cho ng∆∞·ªùi d√πng
    } catch (err) {
        console.error("Error fetching user orders:", err); // Log chi ti·∫øt l·ªói
        res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch ƒë∆°n h√†ng', error: err });
    }
};


// =====================================
// üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
// =====================================
const updateOrderStatus = async (req, res) => {
    const orderId = req.params.id;
    const { status, note } = req.body;

    console.log(`Updating status of order ${orderId} to ${status} with note: ${note}`); // Log th√¥ng tin c·∫≠p nh·∫≠t tr·∫°ng th√°i

    try {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng v√† th√™m v√†o l·ªãch s·ª≠ tr·∫°ng th√°i
        const updatedOrder = await Order.findByIdAndUpdate(
            orderId,
            {
                status,
                $push: {
                    orderHistory: { status, updatedAt: Date.now(), note }
                }
            },
            { new: true }
        );

        if (!updatedOrder) {
            console.error("Order not found:", orderId); // Log n·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng
            return res.status(404).json({ message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });
        }

        console.log("Order updated:", updatedOrder); // Log n·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng
        res.status(200).json(updatedOrder);
    } catch (err) {
        console.error("Error updating order status:", err); // Log chi ti·∫øt l·ªói
        res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng', error: err });
    }
};
// =====================================
// üìå L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
// =====================================
const getAllOrders = async (req, res) => {
    try {
        // L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng v√† populate th√¥ng tin s·∫£n ph·∫©m
        const orders = await Order.find().populate({
            path: 'products.productId', // Populate th√¥ng tin s·∫£n ph·∫©m
            select: 'name new_price description image' // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt t·ª´ s·∫£n ph·∫©m
        });

        console.log("All orders fetched:", orders); // Log danh s√°ch ƒë∆°n h√†ng
        res.status(200).json(orders); // Tr·∫£ v·ªÅ danh s√°ch ƒë∆°n h√†ng
    } catch (err) {
        console.error("Error fetching all orders:", err); // Log chi ti·∫øt l·ªói
        res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng', error: err });
    }
};

module.exports = {
    createOrder,
    getOrderById,
    getOrdersByUser,
    updateOrderStatus,
    getAllOrders
};

