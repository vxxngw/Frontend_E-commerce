const mongoose = require("mongoose");
const Product = require("../models/product.model.js");
const fs = require('fs');
const path = require('path');

// H√†m l∆∞u ·∫£nh t·ª´ base64
const saveImage = (base64Image, fileName) => {
    const matches = base64Image.match(/^data:image\/([a-zA-Z]+);base64,(.+)$/);
    if (!matches || matches.length !== 3) {
        throw new Error('Invalid base64 image');
    }

    const ext = matches[1]; // L·∫•y ph·∫ßn m·ªü r·ªông (jpg, png, ...)
    const data = matches[2]; // L·∫•y d·ªØ li·ªáu base64
    const buffer = Buffer.from(data, 'base64');
    const uploadDir = path.join(__dirname, '../uploads'); // Th∆∞ m·ª•c l∆∞u ·∫£nh

    // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }

    const filePath = path.join(uploadDir, `${fileName}.${ext}`);
    fs.writeFileSync(filePath, buffer); // L∆∞u file v√†o th∆∞ m·ª•c

    // Tr·∫£ v·ªÅ ch·ªâ t√™n file (kh√¥ng bao g·ªìm th∆∞ m·ª•c uploads)
    return `${fileName}.${ext}`;
};

// =====================================
// üì¶ L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
// =====================================
const getAllProducts = async (req, res) => {
    try {
        const products = await Product.find();
        res.status(200).json(products);
    } catch (err) {
        console.error("L·ªói khi l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m:", err.message);
        res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m." });
    }
};

// =====================================
// üîç L·∫•y s·∫£n ph·∫©m theo ID
// =====================================
const getProductById = async (req, res) => {
    let rawId = req.params.id.trim(); // L·∫•y ID t·ª´ request v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng d∆∞ th·ª´a
    console.log("Product ID nh·∫≠n ƒë∆∞·ª£c:", rawId);

    // Lo·∫°i b·ªè k√Ω t·ª± xu·ªëng d√≤ng, tab ho·∫∑c nh·ªØng k√Ω t·ª± kh√¥ng h·ª£p l·ªá
    rawId = rawId.replace(/[\n\t\r]/g, "");

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ID
    if (!mongoose.Types.ObjectId.isValid(rawId)) {
        return res.status(400).json({ error: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá." });
    }

    console.log("ID sau khi ƒë√£ lo·∫°i b·ªè k√Ω t·ª± kh√¥ng h·ª£p l·ªá:", rawId);

    try {
        // Truy v·∫•n s·∫£n ph·∫©m b·∫±ng ID
        const product = await Product.findById(rawId);
        if (!product) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." });
        }
        res.status(200).json(product);
    } catch (err) {
        console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m theo ID:", err.message);
        res.status(500).json({ error: "L·ªói khi l·∫•y s·∫£n ph·∫©m." });
    }
};
// =====================================
// üåü L·∫•y s·∫£n ph·∫©m ph·ªï bi·∫øn
// =====================================
const getPopularProducts = async (req, res) => {
    try {
        const popularProducts = await Product.find({ is_popular: true }).limit(4);
        res.status(200).json(popularProducts);
    } catch (error) {
        console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m ph·ªï bi·∫øn:", error);
        res.status(500).json({ message: "L·ªói server khi l·∫•y s·∫£n ph·∫©m ph·ªï bi·∫øn" });
    }
};

// =====================================
// üß∫ L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
// =====================================
const getCollection = async (req, res) => {
    const { category } = req.params;
    console.log("Danh m·ª•c ƒëang truy v·∫•n:", category);

    const validCategories = ["men", "women", "kid"];
    if (!validCategories.includes(category)) {
        return res.status(400).json({ error: "Danh m·ª•c kh√¥ng h·ª£p l·ªá." });
    }

    try {
        const products = await Product.find({ category });
        res.status(200).json(products);
    } catch (error) {
        console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m theo danh m·ª•c:", error.message);
        res.status(500).json({ error: "L·ªói server khi l·∫•y s·∫£n ph·∫©m theo danh m·ª•c." });
    }
};
// =====================================
// üåü L·∫•y b·ªô s∆∞u t·∫≠p m·ªõi
// =====================================
// üåü L·∫•y b·ªô s∆∞u t·∫≠p m·ªõi
const getNewCollection = async (req, res) => {
    try {
        // T√¨m c√°c s·∫£n ph·∫©m c√≥ thu·ªôc t√≠nh is_new = true
        const newCollection = await Product.find({ is_new: true });
        console.log('Danh s√°ch s·∫£n ph·∫©m m·ªõi:', newCollection);

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong b·ªô s∆∞u t·∫≠p m·ªõi
        if (newCollection.length === 0) {
            return res.status(404).json({ error: "Kh√¥ng c√≥ s·∫£n ph·∫©m m·ªõi trong b·ªô s∆∞u t·∫≠p." });
        }

        res.status(200).json(newCollection);
    } catch (error) {
        console.error("L·ªói khi l·∫•y b·ªô s∆∞u t·∫≠p m·ªõi:", error.message);
        res.status(500).json({ error: "L·ªói server khi l·∫•y b·ªô s∆∞u t·∫≠p m·ªõi." });
    }
};

// H√†m t·∫°o s·∫£n ph·∫©m
const createProduct = async (req, res) => {
    try {
        const { name, description, price, new_price, category, is_popular, is_new, stock, image } = req.body;

        console.log("üñºÔ∏è [POST] L∆∞u ·∫£nh - B·∫Øt ƒë·∫ßu");
        const imageName = saveImage(image, `product_${Date.now()}`);
        console.log("‚úÖ [POST] L∆∞u ·∫£nh - Th√†nh c√¥ng:", imageName);

        const newProduct = new Product({
            name,
            description,
            price,
            new_price,
            category,
            is_popular,
            is_new,
            stock,
            image: imageName, // L∆∞u ch·ªâ t√™n file ·∫£nh
        });

        await newProduct.save();
        console.log("‚úÖ [POST] T·∫°o s·∫£n ph·∫©m - Th√†nh c√¥ng:", newProduct);
        res.status(201).json(newProduct);
    } catch (err) {
        console.error("‚ùå [POST] L·ªói khi t·∫°o s·∫£n ph·∫©m:", err.message);
        res.status(500).json({ message: "L·ªói khi t·∫°o s·∫£n ph·∫©m" });
    }
};

// =====================================
const updateProduct = async (req, res) => {
    const productId = req.params.id;
    const { name, description, price, category, is_popular, is_new, image, stock } = req.body;

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ID
    if (!mongoose.Types.ObjectId.isValid(productId)) {
        return res.status(400).json({ error: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá." });
    }

    try {
        // T√¨m v√† c·∫≠p nh·∫≠t s·∫£n ph·∫©m
        const updatedProduct = await Product.findByIdAndUpdate(
            productId,
            { name, description, price, category, is_popular, is_new, image, stock },
            { new: true }
        );

        if (!updatedProduct) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." });
        }

        res.status(200).json({ success: true, product: updatedProduct });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error.message);
        res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m." });
    }
};
const deleteProduct = async (req, res) => {
    const productId = req.params.id;

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ID
    if (!mongoose.Types.ObjectId.isValid(productId)) {
        return res.status(400).json({ error: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá." });
    }

    try {
        // T√¨m v√† x√≥a s·∫£n ph·∫©m
        const deletedProduct = await Product.findByIdAndDelete(productId);

        if (!deletedProduct) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." });
        }

        res.status(200).json({ success: true, message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng." });
    } catch (error) {
        console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error.message);
        res.status(500).json({ error: "L·ªói khi x√≥a s·∫£n ph·∫©m." });
    }
};

module.exports = {
    getAllProducts,
    getProductById,
    getPopularProducts,
    getCollection,
    getNewCollection,
    createProduct,
    deleteProduct,
    updateProduct
};
