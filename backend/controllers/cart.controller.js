const Cart = require('../models/cart.model.js');

// L·∫•y gi·ªè h√†ng t·ª´ database
const getCartByUser = async (req, res) => {
    try {
        const cart = await Cart.findOne({ userId: req.params.userId }).populate('items.productId');
        res.status(200).json(cart || { userId: req.params.userId, items: [] });
    } catch (err) {
        res.status(500).json({ message: 'L·ªói l·∫•y gi·ªè h√†ng', error: err.message });
    }
};

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
const addToCart = async (req, res) => {
    let { userId, productId, size, quantity } = req.body;

    console.log("üì¶ D·ªØ li·ªáu y√™u c·∫ßu th√™m v√†o gi·ªè:", req.body);

    // Ki·ªÉm tra v√† √©p ki·ªÉu quantity sang s·ªë
    quantity = parseInt(quantity);
    if (!userId || !productId || !size || isNaN(quantity) || quantity <= 0) {
        return res.status(400).json({
            message: 'Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng th√¥ng tin: userId, productId, size, quantity'
        });
    }

    try {
        // T√¨m gi·ªè h√†ng hi·ªán t·∫°i
        let cart = await Cart.findOne({ userId });

        if (!cart) {
            // N·∫øu ch∆∞a c√≥ gi·ªè h√†ng -> t·∫°o m·ªõi
            cart = new Cart({ userId, items: [{ productId, size, quantity }] });
        } else {
            // T√¨m xem s·∫£n ph·∫©m c√πng size ƒë√£ c√≥ trong gi·ªè ch∆∞a
            const index = cart.items.findIndex((item) =>
                item.productId.toString() === productId.toString() && item.size === size
            );

            if (index >= 0) {
                // N·∫øu c√≥ r·ªìi, c·ªông th√™m s·ªë l∆∞·ª£ng
                cart.items[index].quantity += quantity;
            } else {
                // N·∫øu ch∆∞a c√≥, th√™m m·ªõi v√†o gi·ªè
                cart.items.push({ productId, size, quantity });
            }
        }

        // L∆∞u gi·ªè h√†ng ƒë√£ thay ƒë·ªïi
        await cart.save();
        const populatedCart = await Cart.findOne({ userId }).populate('items.productId');
        res.status(200).json(populatedCart);
    } catch (err) {
        console.error('‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:', err);
        res.status(500).json({ message: 'L·ªói th√™m v√†o gi·ªè h√†ng', error: err.message });
    }
};

// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
const removeFromCart = async (req, res) => {
    const { userId, productId, size } = req.body;

    try {
        const cart = await Cart.findOne({ userId });

        if (!cart) {
            return res.status(404).json({ message: 'Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i' });
        }

        cart.items = cart.items.filter(
            (item) => !(item.productId.toString() === productId && item.size === size)
        );

        await cart.save();
        const populatedCart = await Cart.findOne({ userId }).populate('items.productId');
        res.status(200).json(populatedCart);
    } catch (err) {
        res.status(500).json({ message: 'L·ªói x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng', error: err.message });
    }
};

// X√≥a to√†n b·ªô gi·ªè h√†ng
const clearCart = async (req, res) => {
    const { userId } = req.body;

    try {
        await Cart.updateOne({ userId }, { $set: { items: [] } });
        res.status(200).json({ message: 'Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a', userId, items: [] });
    } catch (err) {
        res.status(500).json({ message: 'L·ªói khi x√≥a gi·ªè h√†ng', error: err.message });
    }
};

// C·∫≠p nh·∫≠t gi·ªè h√†ng
const updateCart = async (req, res) => {
    const { userId, cartItems } = req.body;

    try {
        const cart = await Cart.findOne({ userId });

        if (!cart) {
            return res.status(404).json({ message: 'Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i' });
        }

        cart.items = Object.entries(cartItems).map(([key, quantity]) => {
            const [productId, size] = key.split('_');
            return { productId, size, quantity: parseInt(quantity) };
        }).filter(item => item.productId && item.size && !isNaN(item.quantity));

        await cart.save();
        const populatedCart = await Cart.findOne({ userId }).populate('items.productId');
        res.status(200).json({ message: 'Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t', cart: populatedCart });
    } catch (err) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng:', err);
        res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng', error: err.message });
    }
};

module.exports = { getCartByUser, addToCart, removeFromCart, clearCart, updateCart };
